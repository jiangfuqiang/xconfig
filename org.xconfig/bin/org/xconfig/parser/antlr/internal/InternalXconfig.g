/*
* generated by Xtext
*/
grammar InternalXconfig;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xconfig.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xconfig.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xconfig.services.XconfigGrammarAccess;

}

@parser::members {

 	private XconfigGrammarAccess grammarAccess;
 	
    public InternalXconfigParser(TokenStream input, XconfigGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected XconfigGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getXmlsXmlConfigParserRuleCall_0()); 
	    }
		lv_xmls_0_0=ruleXmlConfig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"xmls",
        		lv_xmls_0_0, 
        		"XmlConfig");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleXmlConfig
entryRuleXmlConfig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXmlConfigRule()); }
	 iv_ruleXmlConfig=ruleXmlConfig 
	 { $current=$iv_ruleXmlConfig.current; } 
	 EOF 
;

// Rule XmlConfig
ruleXmlConfig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='xml' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXmlConfigAccess().getXmlKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getXmlConfigAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXmlConfigRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXmlConfigAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXmlConfigAccess().getConfigElementsConfigElementParserRuleCall_3_0()); 
	    }
		lv_configElements_3_0=ruleConfigElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXmlConfigRule());
	        }
       		add(
       			$current, 
       			"configElements",
        		lv_configElements_3_0, 
        		"ConfigElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXmlConfigAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleConfigElement
entryRuleConfigElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigElementRule()); }
	 iv_ruleConfigElement=ruleConfigElement 
	 { $current=$iv_ruleConfigElement.current; } 
	 EOF 
;

// Rule ConfigElement
ruleConfigElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConfigElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigElementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigElementAccess().getTypeConfigElementTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleConfigElementType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigElementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ConfigElementType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConfigElementType
entryRuleConfigElementType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigElementTypeRule()); }
	 iv_ruleConfigElementType=ruleConfigElementType 
	 { $current=$iv_ruleConfigElementType.current; } 
	 EOF 
;

// Rule ConfigElementType
ruleConfigElementType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_type_0_0=RULE_STRING
		{
			newLeafNode(lv_type_0_0, grammarAccess.getConfigElementTypeAccess().getTypeSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigElementTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"STRING");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


